// Generated by Molecule 0.7.5

use super::basic::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct ExtendedWitness(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ExtendedWitness {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ExtendedWitness {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ExtendedWitness {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}(", Self::NAME)?;
        self.to_enum().display_inner(f)?;
        write!(f, ")")
    }
}
impl ::core::default::Default for ExtendedWitness {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        ExtendedWitness::new_unchecked(v)
    }
}
impl ExtendedWitness {
    const DEFAULT_VALUE: [u8; 124] = [
        1, 0, 0, 255, 120, 0, 0, 0, 12, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
        12, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 12, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 4, 0, 0, 0,
    ];
    pub const ITEMS_COUNT: usize = 4;
    pub fn item_id(&self) -> molecule::Number {
        molecule::unpack_number(self.as_slice())
    }
    pub fn to_enum(&self) -> ExtendedWitnessUnion {
        let inner = self.0.slice(molecule::NUMBER_SIZE..);
        match self.item_id() {
            4278190081 => SighashWithAction::new_unchecked(inner).into(),
            4278190082 => Sighash::new_unchecked(inner).into(),
            4278190083 => Otx::new_unchecked(inner).into(),
            4278190084 => OtxStart::new_unchecked(inner).into(),
            _ => panic!("{}: invalid data", Self::NAME),
        }
    }
    pub fn as_reader<'r>(&'r self) -> ExtendedWitnessReader<'r> {
        ExtendedWitnessReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ExtendedWitness {
    type Builder = ExtendedWitnessBuilder;
    const NAME: &'static str = "ExtendedWitness";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ExtendedWitness(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ExtendedWitnessReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ExtendedWitnessReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder().set(self.to_enum())
    }
}
#[derive(Clone, Copy)]
pub struct ExtendedWitnessReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ExtendedWitnessReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ExtendedWitnessReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ExtendedWitnessReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}(", Self::NAME)?;
        self.to_enum().display_inner(f)?;
        write!(f, ")")
    }
}
impl<'r> ExtendedWitnessReader<'r> {
    pub const ITEMS_COUNT: usize = 4;
    pub fn item_id(&self) -> molecule::Number {
        molecule::unpack_number(self.as_slice())
    }
    pub fn to_enum(&self) -> ExtendedWitnessUnionReader<'r> {
        let inner = &self.as_slice()[molecule::NUMBER_SIZE..];
        match self.item_id() {
            4278190081 => SighashWithActionReader::new_unchecked(inner).into(),
            4278190082 => SighashReader::new_unchecked(inner).into(),
            4278190083 => OtxReader::new_unchecked(inner).into(),
            4278190084 => OtxStartReader::new_unchecked(inner).into(),
            _ => panic!("{}: invalid data", Self::NAME),
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for ExtendedWitnessReader<'r> {
    type Entity = ExtendedWitness;
    const NAME: &'static str = "ExtendedWitnessReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        ExtendedWitnessReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_id = molecule::unpack_number(slice);
        let inner_slice = &slice[molecule::NUMBER_SIZE..];
        match item_id {
            4278190081 => SighashWithActionReader::verify(inner_slice, compatible),
            4278190082 => SighashReader::verify(inner_slice, compatible),
            4278190083 => OtxReader::verify(inner_slice, compatible),
            4278190084 => OtxStartReader::verify(inner_slice, compatible),
            _ => ve!(Self, UnknownItem, Self::ITEMS_COUNT, item_id),
        }?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ExtendedWitnessBuilder(pub(crate) ExtendedWitnessUnion);
impl ExtendedWitnessBuilder {
    pub const ITEMS_COUNT: usize = 4;
    pub fn set<I>(mut self, v: I) -> Self
    where
        I: ::core::convert::Into<ExtendedWitnessUnion>,
    {
        self.0 = v.into();
        self
    }
}
impl molecule::prelude::Builder for ExtendedWitnessBuilder {
    type Entity = ExtendedWitness;
    const NAME: &'static str = "ExtendedWitnessBuilder";
    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + self.0.as_slice().len()
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.item_id()))?;
        writer.write_all(self.0.as_slice())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ExtendedWitness::new_unchecked(inner.into())
    }
}
#[derive(Debug, Clone)]
pub enum ExtendedWitnessUnion {
    SighashWithAction(SighashWithAction),
    Sighash(Sighash),
    Otx(Otx),
    OtxStart(OtxStart),
}
#[derive(Debug, Clone, Copy)]
pub enum ExtendedWitnessUnionReader<'r> {
    SighashWithAction(SighashWithActionReader<'r>),
    Sighash(SighashReader<'r>),
    Otx(OtxReader<'r>),
    OtxStart(OtxStartReader<'r>),
}
impl ::core::default::Default for ExtendedWitnessUnion {
    fn default() -> Self {
        ExtendedWitnessUnion::SighashWithAction(::core::default::Default::default())
    }
}
impl ::core::fmt::Display for ExtendedWitnessUnion {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            ExtendedWitnessUnion::SighashWithAction(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, SighashWithAction::NAME, item)
            }
            ExtendedWitnessUnion::Sighash(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, Sighash::NAME, item)
            }
            ExtendedWitnessUnion::Otx(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, Otx::NAME, item)
            }
            ExtendedWitnessUnion::OtxStart(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, OtxStart::NAME, item)
            }
        }
    }
}
impl<'r> ::core::fmt::Display for ExtendedWitnessUnionReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            ExtendedWitnessUnionReader::SighashWithAction(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, SighashWithAction::NAME, item)
            }
            ExtendedWitnessUnionReader::Sighash(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, Sighash::NAME, item)
            }
            ExtendedWitnessUnionReader::Otx(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, Otx::NAME, item)
            }
            ExtendedWitnessUnionReader::OtxStart(ref item) => {
                write!(f, "{}::{}({})", Self::NAME, OtxStart::NAME, item)
            }
        }
    }
}
impl ExtendedWitnessUnion {
    pub(crate) fn display_inner(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            ExtendedWitnessUnion::SighashWithAction(ref item) => write!(f, "{}", item),
            ExtendedWitnessUnion::Sighash(ref item) => write!(f, "{}", item),
            ExtendedWitnessUnion::Otx(ref item) => write!(f, "{}", item),
            ExtendedWitnessUnion::OtxStart(ref item) => write!(f, "{}", item),
        }
    }
}
impl<'r> ExtendedWitnessUnionReader<'r> {
    pub(crate) fn display_inner(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match self {
            ExtendedWitnessUnionReader::SighashWithAction(ref item) => write!(f, "{}", item),
            ExtendedWitnessUnionReader::Sighash(ref item) => write!(f, "{}", item),
            ExtendedWitnessUnionReader::Otx(ref item) => write!(f, "{}", item),
            ExtendedWitnessUnionReader::OtxStart(ref item) => write!(f, "{}", item),
        }
    }
}
impl ::core::convert::From<SighashWithAction> for ExtendedWitnessUnion {
    fn from(item: SighashWithAction) -> Self {
        ExtendedWitnessUnion::SighashWithAction(item)
    }
}
impl ::core::convert::From<Sighash> for ExtendedWitnessUnion {
    fn from(item: Sighash) -> Self {
        ExtendedWitnessUnion::Sighash(item)
    }
}
impl ::core::convert::From<Otx> for ExtendedWitnessUnion {
    fn from(item: Otx) -> Self {
        ExtendedWitnessUnion::Otx(item)
    }
}
impl ::core::convert::From<OtxStart> for ExtendedWitnessUnion {
    fn from(item: OtxStart) -> Self {
        ExtendedWitnessUnion::OtxStart(item)
    }
}
impl<'r> ::core::convert::From<SighashWithActionReader<'r>> for ExtendedWitnessUnionReader<'r> {
    fn from(item: SighashWithActionReader<'r>) -> Self {
        ExtendedWitnessUnionReader::SighashWithAction(item)
    }
}
impl<'r> ::core::convert::From<SighashReader<'r>> for ExtendedWitnessUnionReader<'r> {
    fn from(item: SighashReader<'r>) -> Self {
        ExtendedWitnessUnionReader::Sighash(item)
    }
}
impl<'r> ::core::convert::From<OtxReader<'r>> for ExtendedWitnessUnionReader<'r> {
    fn from(item: OtxReader<'r>) -> Self {
        ExtendedWitnessUnionReader::Otx(item)
    }
}
impl<'r> ::core::convert::From<OtxStartReader<'r>> for ExtendedWitnessUnionReader<'r> {
    fn from(item: OtxStartReader<'r>) -> Self {
        ExtendedWitnessUnionReader::OtxStart(item)
    }
}
impl ExtendedWitnessUnion {
    pub const NAME: &'static str = "ExtendedWitnessUnion";
    pub fn as_bytes(&self) -> molecule::bytes::Bytes {
        match self {
            ExtendedWitnessUnion::SighashWithAction(item) => item.as_bytes(),
            ExtendedWitnessUnion::Sighash(item) => item.as_bytes(),
            ExtendedWitnessUnion::Otx(item) => item.as_bytes(),
            ExtendedWitnessUnion::OtxStart(item) => item.as_bytes(),
        }
    }
    pub fn as_slice(&self) -> &[u8] {
        match self {
            ExtendedWitnessUnion::SighashWithAction(item) => item.as_slice(),
            ExtendedWitnessUnion::Sighash(item) => item.as_slice(),
            ExtendedWitnessUnion::Otx(item) => item.as_slice(),
            ExtendedWitnessUnion::OtxStart(item) => item.as_slice(),
        }
    }
    pub fn item_id(&self) -> molecule::Number {
        match self {
            ExtendedWitnessUnion::SighashWithAction(_) => 4278190081,
            ExtendedWitnessUnion::Sighash(_) => 4278190082,
            ExtendedWitnessUnion::Otx(_) => 4278190083,
            ExtendedWitnessUnion::OtxStart(_) => 4278190084,
        }
    }
    pub fn item_name(&self) -> &str {
        match self {
            ExtendedWitnessUnion::SighashWithAction(_) => "SighashWithAction",
            ExtendedWitnessUnion::Sighash(_) => "Sighash",
            ExtendedWitnessUnion::Otx(_) => "Otx",
            ExtendedWitnessUnion::OtxStart(_) => "OtxStart",
        }
    }
    pub fn as_reader<'r>(&'r self) -> ExtendedWitnessUnionReader<'r> {
        match self {
            ExtendedWitnessUnion::SighashWithAction(item) => item.as_reader().into(),
            ExtendedWitnessUnion::Sighash(item) => item.as_reader().into(),
            ExtendedWitnessUnion::Otx(item) => item.as_reader().into(),
            ExtendedWitnessUnion::OtxStart(item) => item.as_reader().into(),
        }
    }
}
impl<'r> ExtendedWitnessUnionReader<'r> {
    pub const NAME: &'r str = "ExtendedWitnessUnionReader";
    pub fn as_slice(&self) -> &'r [u8] {
        match self {
            ExtendedWitnessUnionReader::SighashWithAction(item) => item.as_slice(),
            ExtendedWitnessUnionReader::Sighash(item) => item.as_slice(),
            ExtendedWitnessUnionReader::Otx(item) => item.as_slice(),
            ExtendedWitnessUnionReader::OtxStart(item) => item.as_slice(),
        }
    }
    pub fn item_id(&self) -> molecule::Number {
        match self {
            ExtendedWitnessUnionReader::SighashWithAction(_) => 4278190081,
            ExtendedWitnessUnionReader::Sighash(_) => 4278190082,
            ExtendedWitnessUnionReader::Otx(_) => 4278190083,
            ExtendedWitnessUnionReader::OtxStart(_) => 4278190084,
        }
    }
    pub fn item_name(&self) -> &str {
        match self {
            ExtendedWitnessUnionReader::SighashWithAction(_) => "SighashWithAction",
            ExtendedWitnessUnionReader::Sighash(_) => "Sighash",
            ExtendedWitnessUnionReader::Otx(_) => "Otx",
            ExtendedWitnessUnionReader::OtxStart(_) => "OtxStart",
        }
    }
}
